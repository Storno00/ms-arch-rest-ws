# --- 1. Réteg: "dependencies" ---
FROM node:18-alpine AS dependencies
WORKDIR /app
# pnpm aktiválása ebben a rétegben
RUN corepack enable && corepack prepare pnpm@latest --activate

COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./
COPY tsconfig.base.json ./
# Összes package.json bemásolása
COPY packages/database/package.json ./packages/database/
COPY packages/shared/package.json ./packages/shared/
COPY services/rest-api/package.json ./services/rest-api/
COPY services/ws-api/package.json ./services/ws-api/
# Prisma séma bemásolása
COPY packages/database/prisma ./packages/database/prisma/

RUN pnpm install --frozen-lockfile --prod=false

# --- 2. Réteg: "builder" ---
FROM node:18-alpine AS builder
WORKDIR /app
# ITT A JAVÍTÁS: pnpm aktiválása ebben a rétegben is!
RUN corepack enable && corepack prepare pnpm@latest --activate

# Fájlok másolása az előző rétegből
COPY --from=dependencies /app ./
COPY . .

# Build futtatása, aminek már látnia kell a pnpm-et
RUN pnpm --filter "rest-api^..." build

# A production-ready mappa létrehozása
RUN pnpm --filter rest-api deploy --prod --legacy /prod/rest-api

# --- 3. Réteg: "final" ---
# Ez a réteg tiszta marad, nincs szüksége pnpm-re
FROM node:18-alpine AS final
WORKDIR /app
ENV NODE_ENV=production

# Telepítjük az OpenSSL-t, amire a Prisma-nak szüksége van.
RUN apk add --no-cache openssl

COPY --from=builder /prod/rest-api .

EXPOSE 8080
CMD ["node", "dist/index.js"]
